#!/usr/bin/env python
"""
Training a classifier
"""
import argparse
from root_gnn.utils import load_yaml
from root_gnn import trainer
from root_gnn import rep_trainer

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description='Train GNN')
    add_arg = parser.add_argument
    add_arg("--num-batches", default=None, help='train number of batches')

    subparsers = parser.add_subparsers(help='training options')
    config_parser = subparsers.add_parser('config', help='config help')
    config_parser.add_argument("filename", help='configuration file name', default=None)

    args_parser = subparsers.add_parser('args', help='arguments help',\
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    trainer.add_args(args_parser)
    args = parser.parse_args()

    if args.filename:
        config = load_yaml(args.filename)
    else:
        config = vars(args)
    
    model_name = config['model']
    mode = 'clf' if "Classifier" in model_name else 'rgr'
    mode += ',globals' if "Global" in model_name else ',edges'
    config['mode'] = mode
    print("mode is", mode)

    if 'loss_pars' in config and config['loss_pars']:
        loss_fcn = config['loss_name']+','+config['loss_pars']
    config['loss_fcn'] = loss_fcn

    config['optimizer'] = config['learning_rate']
    print(config)
    
    if 'trainer' in config and config['trainer'] == "rep":
        trnr = rep_trainer.EmbeddingTrainer(**config)
    else:
        trnr = trainer.Trainer(**config)
    trnr.train(args.num_batches)
