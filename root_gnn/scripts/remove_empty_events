#!/usr/bin/env python

import argparse
import root_gnn
from root_gnn import trainer
import os

import numpy as np

from graph_nets import utils_tf
import sonnet as snt
from root_gnn import model
from root_gnn.utils import load_yaml
from root_gnn import utils_plot
from ROOT import TChain, TFile

from root_gnn.src.datasets.base import DataSet
from root_gnn import datasets as DataSets

import tensorflow as tf

def count_prongs(entry):
    return 0

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Predict with GNN')
    add_arg = parser.add_argument
    add_arg("-i","--inputfile", help="Path to the input root file")
    add_arg("-o","--outputfile", help="Path of the output root file")
    add_arg('--type', default="TauIdentificationDataset", help='which data to process',
            choices=list(DataSets.__all__))

    args = parser.parse_args()

    ntuple_in = args.inputfile
    ntuple_out = args.outputfile

    data = getattr(DataSets, args.type)()

    # Apply the model to the jets in the root file
    from root_gnn.datasets import TauIdentificationDataset

    tauid = data
    tree_name = "output"
    chain = TChain(tree_name,tree_name)
    chain.Add(ntuple_in)
    n_entries = chain.GetEntries()
    test_chain = TChain(tree_name,tree_name)
    test_chain.Add(ntuple_in)

    # Create a new file and a new branch
    newfile = TFile(ntuple_out,"RECREATE")
    newtree = chain.CloneTree(0)

    # Iterate over the entries in the input file
    for ientry in range(0,n_entries):
        test_chain.GetEntry(ientry)
        keep_event = False
        for ijet in range(test_chain.nJets):
            n_nodes = test_chain.JetTowerN[ijet] + test_chain.JetGhostTrackN[ijet]
            # keep the event if there is one non-empty reco jet
            if n_nodes > 0:
                keep_event = True
                break
        if keep_event:
            chain.GetEntry(ientry)
            newtree.Fill()
    newtree.Write()

